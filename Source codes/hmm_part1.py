# -*- coding: utf-8 -*-
"""HMM_part1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17RcAQlMMJQRyr5yMc6OGZwPAdEmyK9Q6
"""

import re
import sys
import numpy as np
import pandas as pd
from EvalScript import evalResult

def estimate_e(data):
  k = 1
  e = {}
  transCount = {}
  totalCount = {}
  unkToken = '#UNK#'

  for i in range(len(data)):
    sentence = data[i]
    for w in sentence:
      x = w[0]
      y = w[1]
      transCount[(y,x)] = transCount.get((y,x),0) + 1
      totalCount = totalCount.get(y,0) + 1

  for transition, count in transCount.items():
    e[transition] = count / (totalCount[transition[0]] + k)

  for y in totalCount.keys():
    e[(y, unkToken)] = k / (totalCount[y]+k)

  return e, list(totalCount.keys())

# Format dataset from file
def get_data(filename):
    with open(filename, encoding='utf-8') as f:
        raw = f.read()
        # array of sentences
        sentences = raw.strip().split('\n\n')

    clean = []
    for sentence in sentences:
        words = sentence.split('\n')
        inner_array = []
        for word in words:
            token, label = word.split(' ')
            inner_array.append([token, label])
        clean.append(inner_array)
    return clean

def predict_label(filename, e, labels):
    # produces a tag y* = argmax(x|y) for each x in the sequence
    input_path = f'{filename}'
    output_path = filename.split('.')
    output_path = output_path[0] + '.p1.out'

    outp = open(output_path, 'w', encoding='utf-8')
    inp = open(input_path, encoding='utf-8')

    for line in inp.readlines():
        line = line.strip('\n')
        if not line or re.search("^\s*$", line):
            outp.write("\n")
        else:
            argmax = 0

            # check if it is a known word
            ystar = None
            for label in labels:
                value = e.get((label, line), 0)
                if value > argmax:
                    argmax = value
                    ystar = label

            # if unknown word
            if ystar == None:
                for label in labels:
                    value = e.get((label, '#UNK#'), 0)
                    if value > argmax:
                        argmax = value
                        ystar = label

            result = line + " " + ystar + "\n"
            outp.write(result)
    outp.close()
    inp.close()

def eval_script(preds, gold):
    gold = open(gold, "r", encoding='UTF-8')
    prediction = open(preds, "r", encoding='UTF-8')
    observed = evalResult.get_observed(gold)
    predicted = evalResult.get_predicted(prediction)
    return evalResult.compare_observed_to_predicted(observed, predicted)

